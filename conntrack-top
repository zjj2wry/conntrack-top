#!/bin/bash
#
# A script that summarizes the top source and destination addresses
# in the netfilter conntrack table, for TCP and UDP.
#
# Note: awk should be the perfect candidate for a task such as this.
# However, due to arrays not being first class citizens in awk and
# the lack of an associative array sort function that doesn't destroy
# all associations, the result is a bit cumbersome. But it works.
#

function initialize {
    if [ ! -e $CONNTRACK_ADDR ]; then
        echo "Unable to find $CONNTRACK_ADDR"
        exit 1
    fi

    parse_options "$@"
    test -z "$TOP" && TOP=10

    COUNT=$(/sbin/sysctl net.netfilter.nf_conntrack_count|awk '{print $3}')
    MAX=$(/sbin/sysctl net.netfilter.nf_conntrack_max|awk '{print $3}')

    if [ -n "$SAMPLE" ]; then
        let LINES=$COUNT/100*$SAMPLE
    elif [ "$COUNT" -gt 25000 ] && [ -z "$FULL" ] && [ -z "$SAMPLE" ]; then
        LINES=25000
    fi

    CONNTRACK_CMD="cat"
    test -n "$LINES" && CONNTRACK_CMD="head -$LINES"
}

function parse_options {
    while getopts ":t:s:fh" opt; do
        case $opt in
            t)
                if [ -z "$OPTARG" ] || [ "$OPTARG" -lt 1 ] || [ "$OPTARG" -gt 15 ]; then
                    usage 1 "Value given with -t must be between 1 and 15"
                fi
                TOP=$OPTARG
                ;;
            s)
                if [ -z "$OPTARG" ] || [ "$OPTARG" -lt 1 ] || [ "$OPTARG" -gt 99 ]; then
                    usage 1 "Value given with -s must be between 1 and 99"
                fi
                let SAMPLE=$OPTARG
                ;;
            f)
                FULL=1
                ;;
            h)
                usage 0
                ;;
            :)
                usage 1 "Option -$OPTARG requires an argument"
                ;;
            \?)
                usage 1 "Invalid option: -$OPTARG"
                ;;
        esac
    done

    if [ -n "$SAMPLE" ] && [ -n "$FULL" ]; then
        usage 1 "Options -s and -f are mutually exclusive"
    fi
}

function usage {
    test -n "$2" && printf "Error: %s\n" "$2"

    printf "\nUsage: %s [-t <n>] [-s <n>] [-f] [-h]\n\nOptions:\n" "$BASH_SOURCE"
    printf "  %-10s %s\n" "-t" "Number of top entries, from 1-15."
    printf "  %-10s %s\n" "-s" "Sample a percentage of connections, from 1-99."
    printf "  %-10s %s\n" "-f" "Force full connection list scan. Default is to cap at 25.000 connections."
    printf "  %-10s %s\n\n" "-h" "This message."

    exit $1
}

function calculate_top {
    $CONNTRACK_CMD $CONNTRACK_ADDR | awk -v top=$TOP -v count=$COUNT -v max=$MAX '
    $3=="tcp" {
        split($7, a, "=");
        split($8, b, "=");
        tcp_src[a[2]] += 1;
        tcp_dst[b[2]] += 1;
    }

    $3=="udp" {
        split($6, a, "=");
        split($7, b, "=");
        udp_src[a[2]] += 1;
        udp_dst[b[2]] += 1;
    }

    function sort(arr, num) {
        for (i = 0; i < num; i++) {
            key = "";
            high = 0;

            for (k in arr) {
                if ((arr[k]+0) > high && length(k) > 1) {
                    high = arr[k]+0;
                    key = k;
                }
            }

            arr[i] = key " " high;
            delete arr[key];
        }
    }

    END {
        sort(tcp_src, top);
        sort(tcp_dst, top);
        sort(udp_src, top);
        sort(udp_dst, top);

        printf("\nCurrent connection count:\t%6s\nConnections max:\t\t%6s\n", count, max);
        printf("\nTop TCP\n%-17s%6s    %-17s%6s\n", "Source", "Num", "Destination", "Num");
        for (i = 0; i < top; i++) {
            split(tcp_src[i], src, " ");
            split(tcp_dst[i], dst, " ");
            printf("%-17s%6s    %-17s%6s\n", src[1], src[2], dst[1], dst[2]);
        }

        printf("\nTop UDP\n%-17s%6s    %-17s%6s\n", "Source", "Num", "Destination", "Num");
        for (i = 0; i < top; i++) {
            split(udp_src[i], src, " ");
            split(udp_dst[i], dst, " ");
            printf("%-17s%6s    %-17s%6s\n", src[1], src[2], dst[1], dst[2]);
        }

        printf("\n");
    }'
}

# main
initialize "$@"

if [ -n "$LINES" ]; then
    echo "Showing top addresses for the first $LINES connections"
fi

calculate_top

